{
  "name": "Jcsg",
  "tagline": "Java implementation of BSP based CSG (Constructive Solid Geometry)",
  "body": "JCSG\r\n=======\r\n\r\n[![Build Status](https://travis-ci.org/miho/JCSG.png?branch=master)](https://travis-ci.org/miho/JCSG) [ ![Download](https://api.bintray.com/packages/miho/JCSG/jcsg/images/download.svg) ](https://bintray.com/miho/JCSG/jcsg/_latestVersion)\r\n\r\nJava implementation of BSP based CSG (Constructive Solid Geometry). It is the only simple and free Java implementation I am aware of. This implementation uses an optimized CSG algorithm based on [csg.js](https://github.com/evanw/csg.js) (see `CSG` and `Node` classes). Thanks to the author for creating the [csg.js](https://github.com/evanw/csg.js) library.\r\n\r\nIn addition to CSG this library provides the following features:\r\n\r\n- optimized `difference()` and `union()` operations (many thanks to Sebastian Reiter)\r\n- extrusion of concave, non-intersecting polygons (uses [Poly2Tri](https://code.google.com/p/poly2tri/) for triangulation)\r\n- convex hull (uses [QuickHull3D](https://www.cs.ubc.ca/~lloyd/java/quickhull3d.html))\r\n- weighted transformations (Scale, Rotation, Translation and Mirror)\r\n- STL import and export (STLLoader from [Fiji](https://github.com/fiji/fiji/blob/master/src-plugins/3D_Viewer/src/main/java/customnode/STLLoader.java))\r\n- OBJ export including material information (see screenshot below)\r\n- supports conversion of CSG's to `JavaFX 3D` nodes\r\n\r\n**JCSG** on [stackoverflow](http://stackoverflow.com/search?q=jcsg).\r\n\r\n![](/resources/screenshot2.png)\r\n\r\nTo see what's possible with JCSG try [JFXScad](https://github.com/miho/JFXScad).\r\n\r\n![](https://raw.githubusercontent.com/miho/JFXScad/master/resources/img/screenshot-02.png)\r\n\r\n## How to Build JCSG\r\n\r\n### Requirements\r\n\r\n- Java >= 1.8\r\n- Internet connection (dependencies are downloaded automatically)\r\n- IDE: [Gradle](http://www.gradle.org/) Plugin (not necessary for command line usage)\r\n\r\n### IDE\r\n\r\nOpen the `JCSG` [Gradle](http://www.gradle.org/) project in your favourite IDE (tested with NetBeans 7.4) and build it\r\nby calling the `assemble` task.\r\n\r\n### Command Line\r\n\r\nNavigate to the [Gradle](http://www.gradle.org/) project (e.g., `path/to/JCSG`) and enter the following command\r\n\r\n#### Bash (Linux/OS X/Cygwin/other Unix-like shell)\r\n\r\n    sh gradlew assemble\r\n    \r\n#### Windows (CMD)\r\n\r\n    gradlew assemble\r\n\r\n## Code Sample:\r\n\r\n\r\n```java\r\n\r\n// we use cube and sphere as base geometries\r\nCSG cube = new Cube(2).toCSG();\r\nCSG sphere = new Sphere(1.25).toCSG();\r\n\r\n// perform union, difference and intersection\r\nCSG cubePlusSphere = cube.union(sphere);\r\nCSG cubeMinusSphere = cube.difference(sphere);\r\nCSG cubeIntersectSphere = cube.intersect(sphere);\r\n        \r\n// translate geometries to prevent overlapping \r\nCSG union = cube.\r\n        union(sphere.transformed(Transform.unity().translateX(3))).\r\n        union(cubePlusSphere.transformed(Transform.unity().translateX(6))).\r\n        union(cubeMinusSphere.transformed(Transform.unity().translateX(9))).\r\n        union(cubeIntersectSphere.transformed(Transform.unity().translateX(12)));\r\n        \r\n// save union as stl\r\ntry {\r\n    FileUtil.write(\r\n            Paths.get(\"sample.stl\"),\r\n            union.toStlString()\r\n    );\r\n} catch (IOException ex) {\r\n    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);\r\n}\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}